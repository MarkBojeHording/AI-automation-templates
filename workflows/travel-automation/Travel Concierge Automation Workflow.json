{
  "name": "Travel Concierge Automation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "travel-concierge",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-1",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "travel-concierge"
    },
    {
      "parameters": {
        "jsCode": "const userQuery = $input.item(0).json.body.userQuery;\nconst chatHistory = $input.item(0).json.body.chatHistory || [];\nconst userId = $input.item(0).json.body.userId || 'anonymous';\n\nconst classificationPrompt = `Classify the following user query into one of three categories: 'Destination Discovery', 'Activity Inspiration', or 'Seasonal Trip'.\n\nUser Query: \"${userQuery}\"\n\nClassification:`;\n\nconst keywordPrompt = `Extract 2-4 key keywords from the following user query. Keywords should be related to travel, destinations, or activities. Examples: 'hiking', 'beach', 'Europe', 'winter', 'adventure', 'family'.\n\nRespond with ONLY a comma-separated list of keywords, or 'none' if no relevant keywords are present.\n\nUser Query: \"${userQuery}\"\n\nKeywords:`;\n\nreturn {\n  json: {\n    userQuery,\n    chatHistory,\n    userId,\n    classificationPrompt,\n    keywordPrompt\n  }\n};"
      },
      "id": "prepare-data-1",
      "name": "Prepare Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [420, 300]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "maxTokens": 50,
          "temperature": 0.1
        },
        "prompt": "={{ $json.classificationPrompt }}"
      },
      "id": "classify-intent-1",
      "name": "Classify Intent",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [600, 220]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "maxTokens": 50,
          "temperature": 0.1
        },
        "prompt": "={{ $json.keywordPrompt }}"
      },
      "id": "extract-keywords-1",
      "name": "Extract Keywords",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [600, 380]
    },
    {
      "parameters": {
        "jsCode": "const classification = $input.item(0).json.response;\nconst keywordsResponse = $input.item(1).json.response;\nconst userQuery = $input.item(0).json.userQuery;\nconst userId = $input.item(0).json.userId;\nconst chatHistory = $input.item(0).json.chatHistory;\n\n// Process keywords\nlet filterFormula = null;\nif (keywordsResponse && keywordsResponse.toLowerCase() !== 'none') {\n  const keywords = keywordsResponse.split(',').map(kw => kw.trim().toLowerCase()).filter(kw => kw.length > 0);\n  \n  if (keywords.length > 0) {\n    const fieldNames = ['Name', 'Description', 'Tags', 'Best Season'];\n    const searchFilters = keywords.map(keyword => {\n      return fieldNames.map(field => `SEARCH(\"${keyword}\", UPPER({${field}}))`).join(', ');\n    }).join(', ');\n    \n    filterFormula = `OR(${searchFilters})`;\n  }\n}\n\nreturn {\n  json: {\n    classification: classification.trim(),\n    filterFormula,\n    userQuery,\n    userId,\n    chatHistory,\n    keywords: keywordsResponse\n  }\n};"
      },
      "id": "process-classification-1",
      "name": "Process Classification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false
          },
          "conditions": [
            {
              "leftValue": "={{ $json.classification }}",
              "rightValue": "Destination Discovery",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ]
        }
      },
      "id": "if-destination-1",
      "name": "If Destination Discovery",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1000, 180]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false
          },
          "conditions": [
            {
              "leftValue": "={{ $json.classification }}",
              "rightValue": "Activity Inspiration",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ]
        }
      },
      "id": "if-activity-1",
      "name": "If Activity Inspiration",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false
          },
          "conditions": [
            {
              "leftValue": "={{ $json.classification }}",
              "rightValue": "Seasonal Trip",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ]
        }
      },
      "id": "if-seasonal-1",
      "name": "If Seasonal Trip",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1000, 420]
    },
    {
      "parameters": {
        "resource": "list",
        "base": {
          "__rl": true,
          "value": "YOUR_BASE_ID",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "Destinations",
          "mode": "id"
        },
        "options": {
          "maxRecords": 5,
          "filterByFormula": "={{ $json.filterFormula ? $json.filterFormula : 'TRUE()' }}"
        }
      },
      "id": "get-destinations-1",
      "name": "Get Destinations",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1200, 180]
    },
    {
      "parameters": {
        "resource": "list",
        "base": {
          "__rl": true,
          "value": "YOUR_BASE_ID",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "Activities",
          "mode": "id"
        },
        "options": {
          "maxRecords": 5,
          "filterByFormula": "={{ $json.filterFormula ? $json.filterFormula : 'TRUE()' }}"
        }
      },
      "id": "get-activities-1",
      "name": "Get Activities",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "resource": "list",
        "base": {
          "__rl": true,
          "value": "YOUR_BASE_ID",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "Destinations",
          "mode": "id"
        },
        "options": {
          "maxRecords": 5,
          "filterByFormula": "={{ $json.filterFormula ? $json.filterFormula : 'TRUE()' }}"
        }
      },
      "id": "get-seasonal-destinations-1",
      "name": "Get Seasonal Destinations",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1200, 420]
    },
    {
      "parameters": {
        "jsCode": "// This node handles data from all three possible paths\nconst userQuery = $input.item(0).json.userQuery;\nconst userId = $input.item(0).json.userId;\nconst classification = $input.item(0).json.classification;\nconst chatHistory = $input.item(0).json.chatHistory || [];\n\n// Get the records from whichever path was taken\nlet relevantData = [];\nif ($input.item(0).json.records) {\n  relevantData = $input.item(0).json.records.map(record => record.fields);\n}\n\n// Create the response prompt\nlet dataType = 'travel options';\nif (classification.includes('Destination')) {\n  dataType = 'destinations';\n} else if (classification.includes('Activity')) {\n  dataType = 'activities';\n} else if (classification.includes('Seasonal')) {\n  dataType = 'seasonal destinations';\n}\n\nconst responsePrompt = `You are a friendly and knowledgeable travel concierge specializing in outdoorsy, nature-based adventures. \n\nUser's query: \"${userQuery}\"\n\nBased on the following ${dataType} data:\n${JSON.stringify(relevantData, null, 2)}\n\nCraft a personalized, conversational, and compelling response that:\n1. Addresses their specific query with enthusiasm\n2. Highlights the outdoor/nature aspects of your recommendations\n3. Mentions 2-3 specific options from the data\n4. Keeps it concise but inspiring (2-3 paragraphs max)\n5. Always ends by recommending they book a call with a local expert (mention the expert's name from the data if available)\n\nTone: Friendly, knowledgeable, and excited about outdoor adventures.`;\n\nreturn {\n  json: {\n    responsePrompt,\n    userQuery,\n    userId,\n    relevantData,\n    classification\n  }\n};"
      },
      "id": "format-response-data-1",
      "name": "Format Response Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1400, 300]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "maxTokens": 400,
          "temperature": 0.7
        },
        "prompt": "={{ $json.responsePrompt }}"
      },
      "id": "generate-response-1",
      "name": "Generate Response",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1600, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "YOUR_BASE_ID",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "User_Chats",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "User ID": "={{ $json.userId }}",
            "User Message": "={{ $json.userQuery }}",
            "Bot Response": "={{ $json.response }}",
            "Classification": "={{ $json.classification }}",
            "Timestamp": "={{ $now }}"
          }
        }
      },
      "id": "log-conversation-1",
      "name": "Log Conversation",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1800, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "success": true,
          "message": "={{ $json.response }}",
          "classification": "={{ $json.classification }}"
        },
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "respond-to-webhook-1",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "maxTokens": 200,
          "temperature": 0.7
        },
        "prompt": "You are a helpful travel concierge. The user asked: \"{{ $json.userQuery }}\"\n\nI couldn't find specific matches in our database, but I'd still love to help you plan an amazing outdoor adventure! Please provide a friendly response acknowledging this and offer to connect them with one of our travel experts who can provide personalized recommendations.\n\nEnd by encouraging them to book a call with an expert."
      },
      "id": "generate-fallback-response-1",
      "name": "Generate Fallback Response",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1200, 540]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Prepare Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Data": {
      "main": [
        [
          {
            "node": "Classify Intent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract Keywords",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify Intent": {
      "main": [
        [
          {
            "node": "Process Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Keywords": {
      "main": [
        [
          {
            "node": "Process Classification",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Process Classification": {
      "main": [
        [
          {
            "node": "If Destination Discovery",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Activity Inspiration",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Seasonal Trip",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Destination Discovery": {
      "main": [
        [
          {
            "node": "Get Destinations",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Fallback Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Activity Inspiration": {
      "main": [
        [
          {
            "node": "Get Activities",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Fallback Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Seasonal Trip": {
      "main": [
        [
          {
            "node": "Get Seasonal Destinations",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Fallback Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Destinations": {
      "main": [
        [
          {
            "node": "Format Response Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Activities": {
      "main": [
        [
          {
            "node": "Format Response Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Seasonal Destinations": {
      "main": [
        [
          {
            "node": "Format Response Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response Data": {
      "main": [
        [
          {
            "node": "Generate Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Response": {
      "main": [
        [
          {
            "node": "Log Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Conversation": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Fallback Response": {
      "main": [
        [
          {
            "node": "Log Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T00:00:00.000Z",
  "versionId": "1"
}
